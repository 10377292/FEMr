installed.packages("roxygen2")
installed.packages("roxygen23")
install.packages("roxygen2")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
install.packages("fda")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
ZincMeusefd1
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPPfit.FEM)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data()
library(FEMr)
?smooth.FEM.basis
remove.packages("FEMr", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("eardi/FEMr")
library(FEMr)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
FEM_CPP_PDE$edf
FEM_CPP_PDE$GCV
plot(FEM_CPP_PDE$GCV)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$GCV)
plot(FEM_CPP_PDE$stderr)
plot(FEM_CPP_PDE$edf)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data(mesh.2D.simple)
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10, 100)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
names((FEM_CPP_PDE))
names((FEM_CPP_PDE$beta))
?regexp
?FDA
??FDA
demo(fdarm)
library(fda)
demo(fdarm)
demo(fdarm)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
ZincMeuse$fit.FEM
library(FEMr)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj, lambda = lambda)
## plot of the FEM object representing the fitted function
image(ZincMeuse$fit.FEM)
## plot the FEM object representing the misfit
image(ZincMeuse$PDEmisfit.FEM)
image(ZincMeuse$fit.FEM)
image(ZincMeuse$PDEmisfit.FEM)
library("RTriangle", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
?triangulate
install.packages("devtools")
library(FEMr)
library(FEMr)
#'
#' data(MeuseData)
#' data(MeuseBorder)
#' mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
#' plot(mesh)
data(MeuseData)
data(MeuseBorder)
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
names(mesh)
setwd("~/git/FEMr/R")
setwd("~/git/FEMr")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(FEMr)
data(MeuseData)
data(MeuseBorder)
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
plot(mesh)
mesh_refine <- refine.MESH.2D(mesh, minimum_angle = 25, maximum_area = 1500)
plot(mesh_refine)
mesh_refine <- refine.MESH.2D(mesh, minimum_angle = 25, maximum_area = 3000)
plot(mesh_refine)
mesh_refine <- refine.MESH.2D(mesh, minimum_angle = 25, maximum_area = 10000)
plot(mesh_refine)
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
plot(mesh)
mesh_refine <- refine.MESH.2D(mesh, minimum_angle = 25, maximum_area = 10000)
mesh_refine <- refine.MESH.2D(mesh, minimum_angle = 25, maximum_area = 10000)
data(MeuseData)
data(MeuseBorder)
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
plot(mesh)
mesh_refine <- refine.MESH.2D(mesh, minimum_angle = 30, maximum_area = 10000)
plot(mesh_refine)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise("man/create.FEM.basis.Rd")
tools::showNonASCII("man/create.FEM.basis.Rd")
tools::showNonASCII("man/create.FEM.basis.Rd")
tools::showNonASCII("man/R_elementProperties.Rd")
tools::showNonASCII("man/R_elementProperties.Rd")
tools::showNonASCII( readLines("man/R_elementProperties.Rd"))
tools::showNonASCII( readLines("man/R_elementProperties.Rd"))
roxygen2::roxygenise("man/create.FEM.basis.Rd")
roxygen2::roxygenise()
setwd("~/git/FEMr/R")
setwd("~/git/FEMr")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?meuse
data("MeuseData")
data
data()
summary((MeuseData))
dim(MeuseBorder)
dim(MeuseData)
dim(MeuseBorder)
load("/home/eardi/git/FEMr/data/mesh.2D.simple.rda")
plot(mesh)
names(mesh)
mesh.2D.simple <- mesh
save(mesh.2D.simple,file = "mesh.2D.simple.rda")
load("/home/eardi/git/FEMr/data/mesh.2D.rectangular.rda")
plot(mesh)
mesh.2D.rectangular<-mesh
save(mesh.2D.rectangular, file = "mesh.2D.rectangular.rda")
roxygen2::roxygenise()
roxygen2::roxygenise()
?plot
?par
roxygen2::roxygenise()
?plot3d
roxygen2::roxygenise()
?plot.TRIMESH2D
?plot
roxygen2::roxygenise()
?rgl::plot3d
?par
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::vignette_roclet()
roxygen2::vignette_roclet()
