evalmat[i,triangles[indi,2]] = (4* baryc2 - 1) * M2[indi,2]
evalmat[i,triangles[indi,3]] = (4* baryc3 - 1) * M3[indi,2]
evalmat[i,triangles[indi,6]] = (4* baryc2 ) * M1[indi,2] + 4*baryc1 * M2[indi,2]
evalmat[i,triangles[indi,4]] = (4* baryc3 ) * M2[indi,2] + 4*baryc2 * M3[indi,2]
evalmat[i,triangles[indi,5]] = (4* baryc1 ) * M3[indi,2] + 4*baryc3 * M1[indi,2]
}
else if(nderivs[1] == 0 && nderivs[2] == 1)
{
evalmat[i,triangles[indi,1]] = (4*baryc1 - 1)*M1[indi,3]
evalmat[i,triangles[indi,2]] = (4*baryc2 - 1)*M2[indi,3]
evalmat[i,triangles[indi,3]] = (4*baryc3 - 1)*M3[indi,3]
evalmat[i,triangles[indi,6]] = 4*baryc2*M1[indi,3] + 4*baryc1*M2[indi,3]
evalmat[i,triangles[indi,4]] = 4*baryc3*M2[indi,3] + 4*baryc2*M3[indi,3]
evalmat[i,triangles[indi,5]] = 4*baryc1*M3[indi,3] + 4*baryc3*M1[indi,3]
}
else if(nderivs[1] == 1 && nderivs[2] == 1)
{
evalmat[i,triangles[indi,1]] = 4*M1[indi,2]%*%M1[indi,3];
evalmat[i,triangles[indi,2]] = 4*M2[indi,2]%*%M2[indi,3];
evalmat[i,triangles[indi,3]] = 4*M3[indi,2]%*%M3[indi,3];
evalmat[i,triangles[indi,6]] = 4*M2[indi,2]%*%M1[indi,3] + 4*M2[indi,3]%*%M1[indi,2];
evalmat[i,triangles[indi,4]] = 4*M3[indi,2]%*%M2[indi,3] + 4*M3[indi,3]%*%M2[indi,2];
evalmat[i,triangles[indi,5]] = 4*M1[indi,2]%*%M3[indi,3] + 4*M1[indi,3]%*%M3[indi,2];
}
else if(nderivs[1] == 2 && nderivs[2] == 0)
{
evalmat[i,triangles[indi,1]] = 4*M1[indi,2]%*%M1[indi,2];
evalmat[i,triangles[indi,2]] = 4*M2[indi,2]%*%M2[indi,2];
evalmat[i,triangles[indi,3]] = 4*M3[indi,2]%*%M3[indi,2];
evalmat[i,triangles[indi,6]] = 8*M2[indi,2]%*%M1[indi,2];
evalmat[i,triangles[indi,4]] = 8*M3[indi,2]%*%M2[indi,2];
evalmat[i,triangles[indi,5]] = 8*M1[indi,2]%*%M3[indi,2];
}
else if(nderivs[1] == 0 && nderivs[2] == 2)
{
evalmat[i,triangles[indi,1]] = 4*M1[indi,3]%*%M1[indi,3];
evalmat[i,triangles[indi,2]] = 4*M2[indi,3]%*%M2[indi,3];
evalmat[i,triangles[indi,3]] = 4*M3[indi,3]%*%M3[indi,3];
evalmat[i,triangles[indi,6]] = 8*M2[indi,3]%*%M1[indi,3];
evalmat[i,triangles[indi,4]] = 8*M3[indi,3]%*%M2[indi,3];
evalmat[i,triangles[indi,5]] = 8*M1[indi,3]%*%M3[indi,3];
}
else
{
stop('Inadmissible derivative orders.')
}
}
else
{
if(sum(nderivs) == 0)
{
evalmat[i,triangles[indi,1]] = baryc1;
evalmat[i,triangles[indi,2]] = baryc2;
evalmat[i,triangles[indi,3]] = baryc3;
}
else if(nderivs[1] == 1 && nderivs[2] == 0)
{
evalmat[i,triangles[indi,1]] = M1[indi[1],2];
evalmat[i,triangles[indi,2]] = M1[indi[2],2];
evalmat[i,triangles[indi,3]] = M1[indi[3],2];
}
else if(nderivs[1] == 0 && nderivs[2] == 1)
{
evalmat[i,triangles[indi,1]] = M1[indi[1],3];
evalmat[i,triangles[indi,2]] = M1[indi[2],3];
evalmat[i,triangles[indi,3]] = M1[indi[3],3];
}
else
{
stop('Inadmissible derivative orders.')
}
}
}
}
return(evalmat)
}
R_eval.FEM.fobj <- function(fobj, locations)
{
if (is.vector(locations))
{
locations = t(as.matrix(locations))
}
N = nrow(locations)
# Augment Xvec and Yvec by ones for computing barycentric coordinates
Pgpts = cbind(matrix(1,N,1),locations[,1],locations[,2])
# Get nodes and index
mesh = basisobj$mesh
nodes = mesh$nodes
triangles = mesh$triangles
coefmat = fobj$coefmat
nsurf = dim(coefmat)[2]
basisobj = fobj$basisobj
order = basisobj$order
#nodeindex = params$nodeindex
J = basisobj$J
# 1st, 2nd, 3rd vertices of triangles
v1 = nodes[triangles[,1],]
v2 = nodes[triangles[,2],]
v3 = nodes[triangles[,3],]
if(order !=2 && order != 1)
{
stop('ORDER is neither 1 or 2.')
}
# Denominator of change of coordinates chsange matrix
modJ = basisobj$J
ones3 = matrix(1,3,1)
modJMat = modJ %*% t(ones3)
M1 = cbind(v2[,1]*v3[,2] - v3[,1]*v2[,2], v2[,2] - v3[,2], v3[,1] - v2[,1])/(modJMat)
M2 = cbind(v3[,1]*v1[,2] - v1[,1]*v3[,2], v3[,2] - v1[,2], v1[,1] - v3[,1])/(modJMat)
M3 = cbind(v1[,1]*v2[,2] - v2[,1]*v1[,2], v1[,2] - v2[,2], v2[,1] - v1[,1])/(modJMat)
ind = matrix(0,N,1)
for(i in 1:N)
{
ind[i] = R_insideIndex(mesh, as.numeric(locations[i,]))
}
evalmat = matrix(NA, nrow=N, ncol=nsurf)
for (isurf in 1:nsurf)
{
for(i in 1:N)
{
indi = ind[i]
if(!is.nan(indi))
{
baryc1 = (M1[indi,]*Pgpts[i,]) %*% ones3
baryc2 = (M2[indi,]*Pgpts[i,]) %*% ones3
baryc3 = (M3[indi,]*Pgpts[i,]) %*% ones3
if(order == 2)
{
c1 = coefmat[triangles[indi,1],isurf]
c2 = coefmat[triangles[indi,2],isurf]
c3 = coefmat[triangles[indi,3],isurf]
c4 = coefmat[triangles[indi,6],isurf]
c5 = coefmat[triangles[indi,4],isurf]
c6 = coefmat[triangles[indi,5],isurf]
fval =  c1*(2* baryc1^2 - baryc1) +
c2*(2* baryc2^2 - baryc2) +
c3*(2* baryc3^2 - baryc3) +
c4*(4* baryc1 * baryc2) +
c5*(4* baryc2 * baryc3) +
c6*(4* baryc3 * baryc1)
evalmat[i,isurf] = fval
}
else
{
c1 = coefmat[triangles[indi,1],isurf]
c2 = coefmat[triangles[indi,2],isurf]
c3 = coefmat[triangles[indi,3],isurf]
fval = c1*baryc1 + c2*baryc2 + c3*baryc3
evalmat[i,isurf] = fval
}
}
}
}
return(evalmat)
}
fnhat = eval.FEM.fobj(fobj = felsplobj, locations = locations, CPP_CODE = FALSE)
fnhat = eval.FEM.fobj(fobj = felsplobj, locations = locations, CPP_CODE = FALSE)
felsplobj = felsplobj$felsplobj
loc_nodes = 1:length(observations)
fnhat = eval.FEM.fobj(fobj = felsplobj, locations = locations, CPP_CODE = FALSE)
betahat  = lm.fit(covariates,observations-fnhat)
betahat
betahat  = lm.fit(covariates,observations-fnhat)$coefficients
betahat
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, CPP_CODE = TRUE)
names(ZincMeusefd1)
beta
ZincMeusefd1$beta
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
covariates
ZincMeusefd1$beta
?rgl.triangles
?rgl.triangles
plot
?rgl.triangles
??rgl.triangles
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10, main = "MEUSE")
plot(ZincMeusefd1$felsplobj, num_refinements = 10, )
plot(ZincMeusefd1$felsplobj, num_refinements = 10, rgl.material(color="#000000")
)
data = loadData('heightWeight'); % data(:,1) = class, 2 = height, 3 = weight
data = loadData('heightWeight'); % data(:,1) = class, 2 = height, 3 = weight)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
# BorderIndices = (1:length(mesh$nodesmarker))[mesh$nodesmarker==1]
# Indices= BorderIndices
# Values = rep(x = 7, times = length(Indices))
# BC = list(Indices = Indices, Values = Values)
plot(mesh)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
installed.packages("roxygen2")
installed.packages("roxygen")
installed.packages("roxygen2")
installed.packages("roxygen23")
install.packages("roxygen2")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
install.packages("fda")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
ZincMeusefd1
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPPfit.FEM)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
# Isotropic smoothing
PDE_parameters_iso = list(K = matrix(c(1,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_iso)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
# Anysotropic smoothing
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters_anys)
plot(FEM_CPP_PDE$fit.FEM)
library(FEMr)
data()
library(FEMr)
?smooth.FEM.basis
remove.packages("FEMr", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("eardi/FEMr")
library(FEMr)
library(FEMr)
setwd("~/git/FEMr/RScripts")
# nodes = rbind(c(1,1), c(20,1), c(20,5), c(1,5),cbind(runif(20, min = 1, max = 20), runif(20, min = 1, max = 5)))
# mesh = create.MESH.2D(nodes, segments = rbind(c(1,2),c(2,3),c(3,4),c(4,1)))
# mesh = refine.MESH.2D(mesh, maximum_area = 0.1, minimum_angle = 30)
# plot(mesh)
#save(mesh,file = "mesh.2D.long")
#data(file = "mesh.2D.long")
data(mesh.2D.rectangular)
observations = sin(0.2*pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
# Smoothing coefficients
lambda = c(10^-2)
K_func<-function(points)
{
mat<-c(0.01,0,0,1)
as.vector(0.5*mat %*% t(points[,1]^2))
}
b_func<-function(points)
{
rep(c(0,0), nrow(points))
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
# Space-varying smoothing
PDE_parameters = list(K = K_func, b = b_func, c = c_func, u = u_func)
FEM_CPP_PDE = smooth.FEM.PDE.SV.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
PDE_parameters = list(K = K_func, b = b_func, c = c_func, u = u_func)
FEM_CPP_PDE = smooth.FEM.PDE.SV.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters, GCV = TRUE)
plot(FEM_CPP_PDE$fit.FEM)
FEM_CPP_PDE$GCVseq
FEM_CPP_PDE$edf
mesh
mesh$nodes
