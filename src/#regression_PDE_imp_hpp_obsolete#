#ifndef __REGRESSION_PDE_IMP_HPP_
#define __REGRESSION_PDE_IMP_HPP_

#include "solver.hpp"

//construct NW block of the system matrix in Ramsay with covariates format
template<typename Integrator, UInt ORDER>
void RegressionPDE<Integrator, ORDER>::setNWBlockSimple(){

		setQ();
		tripletsData_.resize(Q_.rows()*Q_.cols());
	
		//building matrix L
		for(auto i=0; i<Q_.rows(); i++)
		{
			for(auto j=0; j<Q_.cols(); j++)
			{
				tripletsData_.emplace_back(coeff(i,j,Q_(i,j)));
			}
	    }

	    //NWblock_.setFromTriplets(coefflist.begin(),coefflist.end());
	    //NWblock_.makeCompressed();
}

//construct NW block of the system matrix in Ramsay with covariates format
template<typename Integrator, UInt ORDER>
void RegressionPDE<Integrator, ORDER>::setNWBlock()
{
		UInt nnodes = mesh_.num_nodes();
		UInt nlocations = regressionData_.getNumberofObservations();

		setPsi();
		setQ();

		for(auto i=0; i<nnodes; i++)
		{
			for(auto j=0; j<nnodes; j++)
			{
				tripletsData_.emplace_back(coeff(i,j,psi_.col(i).transpose()*Q_*psi_.col(j)));
			}
		}

		//NWblock_ = psi_.transpose()*Q*psi_;
		//NWblock_.makeCompressed();

}

template<typename Integrator, UInt ORDER>
void RegressionPDE<Integrator, ORDER>::setPsi(){

		std::cout<<"Format psi execution"<<std::endl;
		UInt nnodes = mesh_.num_nodes();
		UInt nlocations = regressionData_.getNumberofObservations();

		//cout<<"Nodes number "<<nnodes<<"Locations number "<<nlocations<<endl;

		//std::vector<coeff> entries;
		//entries.resize((ORDER * 3)*nlocations);


		psi_.resize(nlocations, nnodes);
		psi_.reserve(Eigen::VectorXi::Constant(nlocations,ORDER*3));

		Triangle<ORDER*3> tri_activated;
		Eigen::Matrix<Real,ORDER * 3,1> coefficients;

		Real evaluator;

		for(UInt i=0; i<nlocations;i++)
		{
			tri_activated = mesh_.findLocationNaive(regressionData_.getLocations()[i]);
			for(UInt node = 0; node < ORDER*3 ; ++node)
			{
				 coefficients = Eigen::Matrix<Real,ORDER * 3,1>::Zero();
				 coefficients(node) = 1; //Activates only current base
				 evaluator = evaluate_point<ORDER>(tri_activated, regressionData_.getLocations()[i], coefficients);
				 psi_.insert(i, tri_activated[node].getId()) = evaluator;
			}

		}

		psi_.makeCompressed();
}

template<typename Integrator, UInt ORDER>
void RegressionPDE<Integrator, ORDER>::setQ(){

		//regressionData_.printCovariates(std::cout);
		const MatrixXr& W(this->regressionData_.getCovariates());
		//std::cout<<"W "<< W <<std::endl;
		//total number of mesh nodes
		//UInt nnodes = mesh_.num_nodes();

		MatrixXr WTW(W.transpose()*W);

		Q_=-W*WTW.ldlt().solve(W.transpose()); // using cholesky LDLT decomposition for computing hat matrix

		for (int i=0; i<Q_.rows();++i)
		{
			Q_(i,i) += 1;
		}

}


//Implementation kept from Sangalli et al
template <typename Integrator, UInt ORDER>
VectorXr RegressionPDE<Integrator, ORDER>::smoothLaplace()
{
	std::cout<<"Order "<<ORDER<<" execution!"<<std::endl;
	FiniteElement<Integrator, ORDER> fe;
	
	typedef EOExpr<Real, Mass<Integrator, ORDER> > ETMass;
	typedef EOExpr<Real, Stiff<Integrator, ORDER> > ETStiff;

	Mass<Integrator, ORDER> EMass;
	Stiff<Integrator, ORDER> EStiff;
	
	ETMass mass(EMass);
	ETStiff stiff(EStiff);
	
	this->setNWBlockSimple();
	std::cout<<"Block L correctly set"<<std::endl;
	
	//building right hand side and forcing term
    UInt ndata=regressionData_.getObservations().size();
    UInt nnodes=mesh_.num_nodes();
    SpMat NWblock(nnodes,nnodes);
    NWblock.setFromTriplets(tripletsData_.begin(),tripletsData_.end());
    NWblock.makeCompressed();

	VectorXr righthand;
	righthand=VectorXr::Zero(nnodes);
	righthand.topRows(ndata)=NWblock.topLeftCorner(ndata,ndata)*regressionData_.getObservations();
	VectorXr forcing = VectorXr::Zero(nnodes);
	
	MixedFE<Integrator,ORDER> mixedFE(mesh_,fe);
	mixedFE.build(tripletsData_,(-regressionData_.getLambda())*stiff, (-regressionData_.getLambda())*mass, righthand, forcing);
	
	//Appling border conditions if necessary
	if(regressionData_.getDirichletIndices().size() != 0)
		mixedFE.addDirichletBC(regressionData_.getDirichletIndices(), regressionData_.getDirichletValues());
	
	//prova.solveSystem<SpConjGrad>();
	mixedFE. template solve<SpLU>();
	return mixedFE.getSolution();
}


//Implementation kept from Azzimonti et al
//template <typename Integrator, UInt ORDER>
//VectorXr RegressionPDE<Integrator, ORDER>::smoothReaction(const std::vector<Point>& locations, const VectorXr& forcing_term, Real c, const vector<Real>& beta, Eigen::Matrix<Real,2,2> K)
//{
//		std::cout<<"Order "<<ORDER<<" execution!"<<std::endl;
//		//MeshHandler<ORDER> mesh(Rmesh);
//		FiniteElement<Integrator> fe;
//
//		typedef ETWrapper<Real, Mass<Integrator> > ETMass;
//		typedef ETWrapper<Real, Stiff<Integrator> > ETStiff;
//		typedef ETWrapper<Real, vGrad<Integrator> > ETGrad;
//
//
//
//		Mass<Integrator> EMass(fe);
//		Stiff<Integrator> EStiff(fe);
//		vGrad<Integrator> EvGrad(fe);
//
//		ETMass mass(EMass);
//		ETStiff stiff(EStiff);
//		ETGrad grad(EvGrad);
//
//		Assembler assembleNE;
//		Assembler assembleSE;
//		Assembler assembleSO;
//
//
//		std::cout<<"Assembling 1 problem"<<std::endl;
//		assembleSE.operKernel((-1)*mass,mesh_,fe);
//		std::cout<<"Assembling 2 problem"<<std::endl;
//		assembleSO.operKernel(c*mass+K*stiff+beta*grad,mesh_,fe);
//		std::cout<<"Assembling 3 problem"<<std::endl;
//		assembleNE.operKernel((iohandler_.getLambda())*(c*mass+K*stiff+beta*grad),mesh_,fe);
//
//		std::cout<<"Initialized problem"<<std::endl;
//
//
//		this->setCovariateBlockPsi(locations);
//
//		//building right hand side upper block
//		UInt nnodes=mesh_.num_nodes();
//		VectorXr b1 = psi_.transpose()*iohandler_.getObservations();
//
//
//
//		SpMat NE_transp = assembleNE.getSpOperKernel().transpose();
//
//		NE_transp.makeCompressed();
//
//
//		std::cout<<"Starting building system"<<std::endl;
//		linearSystem_.buildSystem(NWblock_, NE_transp, assembleSO.getSpOperKernel(),
//						assembleSE.getSpOperKernel(), b1, forcing_term);
//
//		if(iohandler_.getDirichletIndexes().size() != 0)
//			linearSystem_.applyDirichletPenalized(iohandler_.getDirichletIndexes(), iohandler_.getDirichletValues());
//
//	linearSystem_.solveSystem<SpLU>();
//	return linearSystem_.getSolution();
//}



#endif
